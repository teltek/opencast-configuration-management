#########################################
### Opencast configuration properties ###
#########################################

# The internal URL of this Opencast installation, used to locate services running on this instance and for inter-node
# communication in distributed setups.
#
# Note that while the server.url is the public url of this instance, there is the actual public url of an individual
# tenant, which is configured in etc/load/org.opencastproject.organization-<tenant id>.cfg with the default tenant id
# being "oc_default_org".
#
# Also note that if this felix installation is proxied behind an Apache HTTPD reverse proxy, and communication is meant
# to go through that proxy, then server.url should point to the proxy's port (usually 80).
org.opencastproject.server.url=http://{{ inventory_hostname }}:{{ opencast_http_port| default('8080') }}

# This property specifies the comma separated list of addresses used to for opencast to listen to.  (e.g. localhost or
# localhost,10.0.0.1). Host names or IP addresses can be used. Default value is "0.0.0.0".
# Comment this out to make Opencast listen to all hosts.
org.ops4j.pax.web.listening.addresses={{ opencast_listening_addresses | default('0.0.0.0') }}

# The url of the remote service registry.  This is used in cases where there is no direct connection to the service
# registry database such as capture agens running in protected environments. This is typically true for capture agents
# and should be set to the url of a server running the actual implementation of the service registry and the path to
# the service registry(admin, worker, etc. See the build profiles in pom.xml for a complete list).
#org.opencastproject.serviceregistry.url=${org.opencastproject.server.url}/services

# The base URL to use for publishing job locations. If left commented out, the local server URL will be used.  Set this
# if you intend to support swapping servers with different IPs or host names.
#org.opencastproject.jobs.url=${org.opencastproject.server.url}

# Whether to accept a job whose load exceeds the hostâ€™s max load
# Default: true
#org.opencastproject.job.load.acceptexceeding=true

# The directory where the system will store its processed files (including temporary files).  This directory should
# be persistent between reboots (i.e., not /tmp)
org.opencastproject.storage.dir={{ oc_work_dir }}

# The directory where the configuration files for the Elasticsearch indices are located. This directory should
# be persistent between reboots (i.e., not /tmp)
org.opencastproject.elasticsearch.config.dir=${karaf.etc}/index

# The username and password for a system administrator account. If both `user` and `pass` are set, Opencast will create
# or update that user when started up. If it is commented out, nothing will happen.
# WARNING: Commenting this out later or renaming the user will *not* remove already created user.
org.opencastproject.security.admin.user={{ oc_admin_username }}
org.opencastproject.security.admin.pass={{ oc_admin_password }}
org.opencastproject.security.admin.roles=ROLE_ADMIN,ROLE_USER,ROLE_OAUTH_USER

# The username and password to present to other Opencast servers when calling their REST endpoints.  The remote server
# must contain matching values.
org.opencastproject.security.digest.user={{ oc_digest_username }}
org.opencastproject.security.digest.pass={{ oc_digest_password }}

# The number of times to retry a request if the nonce expires.
org.opencastproject.security.digest.nonce.retries=12

# The configuration property specifying the minimum amount of time in seconds wait before retrying a request after
# a nonce timeout. Default is 300 seconds (5 minutes).
org.opencastproject.security.digest.nonce.base.time=300

# The maximum amount of time to wait in addition to the base time for a random generator to add after a nonce timeout
# so that requests that timeout won't all try again at exactly the same time. Default is 300 seconds (5 minutes).
org.opencastproject.security.digest.nonce.variable.time=300

# This changes the number of seconds from when an internal request is made until a signed URL will expire. More
# specifically, the HTTP client needs access to internal storage areas such as the working file repository as well as to
# distributed artifacts on the downloads and streaming servers, all of which are protected by verification components.
# Default is 60 seconds as it shouldn't take longer than that to make a request to a server. This will have no impact on
# a system where url signing is not configured. For more information please see:
# http://docs.opencast.org/latest/admin/configuration/stream-security/#configuration-of-url-signing-timeout-values
org.opencastproject.security.internal.url.signing.duration=60

# Optional demo accounts with series memberships, but not administrative rights.  If set to 'true', 1000 users will be
# loaded into the sample user directory. Usernames are user0, ..., user999. Passwords are pass0, ..., pass999.
# Default: false
#org.opencastproject.security.demo.loadusers=false

# The base URL of the streaming server (ususally "rtmp://<SERVER_URL>/opencast-engage").
# ${org.opencastproject.server.url} can not be used, because the streaming server does not use the HTTP protocol.
# Streaming is not included in the default workflow, since the Red5 streaming server is a 3rd party component that
# requires separate installation.
{% if groups['streamer'] is defined and groups['streamer'] | length > 0 %}
org.opencastproject.streaming.url=rtmp://{{groups['streamer'][0]}}/opencast-engage
{% else %}
#org.opencastproject.streaming.url=rtmp://localhost/opencast-engage
{% endif %}

# The directory where the opencast streaming app for Red5 stores the streams
{% if groups['streamer'] is defined and groups['streamer'] | length > 0 %}
org.opencastproject.streaming.directory={{oc_streaming_dir}}
{% else %}
#org.opencastproject.streaming.directory=${org.opencastproject.storage.dir}/streams
{% endif %}

# The port to use for the streaming server, only used by a Wowza streaming server.
#org.opencastproject.streaming.port=1935

# Some newer streaming server versions expect an "flv:" tag within the rtmp URL.
# Not every RTMP-streaming server is compatible with this (i.e. nginx), so this
# is the compatibility mode to the old syntax.
# true  = without "flv:" tag - old syntax
# false = with    "flv:" tag - new syntax
#org.opencastproject.streaming.flvcompatibility=true

# The directory to store media, metadata, and attachments for download from the engage tool
org.opencastproject.download.directory=${org.opencastproject.storage.dir}/downloads

# The base URL for media downloads.
org.opencastproject.download.url={{ opencast_download_base_url | default ('${org.opencastproject.server.url}/static') }}

# Relational Database configuration.  By default, Opencast uses an embedded H2 database.  A standalone database server
# is recommended for production systems.  If you run the ddl script for your db vendor (see docs/scripts/ddl/) manually,
# (this is recommended) set 'ddl-generation' to 'false'.
org.opencastproject.db.ddl.generation=true

# Enable ddl script generation.  This is used by developers to update the ddl scripts, and should not be enabled in
# production.
#org.opencastproject.db.ddl.script.generation=false

{% if groups['mysql'] is defined and groups['mysql'] | length > 0 %}
# db.vendor can be any of the values listed at under the "eclipselink.target-database" section of
# http://www.eclipse.org/eclipselink/documentation/2.4/jpa/extensions/p_target_database.htm#target-database
# Common values include MySQL, PostgreSQL.
org.opencastproject.db.vendor={{ opencast_db_vendor | default('MySQL') }}

# Opencast comes with the jdbc drivers for MySQL (com.mysql.jdbc.Driver) and PostgreSQL (org.postgresql.Driver). To add
# other jdbcDrivers to the Opencast runtime, rebuild the opencast-db module with your desired drivers.
org.opencastproject.db.jdbc.driver={{ opencast_jdbc_driver | default('com.mysql.jdbc.Driver')  }}

# The jdbc connection url, username, and password
org.opencastproject.db.jdbc.url=jdbc:mysql://{{groups['mysql'][0]}}/opencast
org.opencastproject.db.jdbc.user={{ opencast_db_user| default('opencast') }}
org.opencastproject.db.jdbc.pass={{ opencast_db_password| default('dbpassword') }}

{% else %}
# db.vendor can be any of the values listed at under the "eclipselink.target-database" section of
# http://www.eclipse.org/eclipselink/documentation/2.4/jpa/extensions/p_target_database.htm#target-database
# Common values include MySQL, PostgreSQL.
#org.opencastproject.db.vendor=MySQL

# Opencast comes with the jdbc drivers for MySQL (com.mysql.jdbc.Driver) and PostgreSQL (org.postgresql.Driver). To add
# other jdbcDrivers to the Opencast runtime, rebuild the opencast-db module with your desired drivers.
#org.opencastproject.db.jdbc.driver=com.mysql.jdbc.Driver

# The jdbc connection url, username, and password
#org.opencastproject.db.jdbc.url=jdbc:mysql://localhost/opencast
#org.opencastproject.db.jdbc.user=opencast
#org.opencastproject.db.jdbc.pass=dbpassword
{% endif %}

{% if groups['activemq'] is defined and groups['activemq'] | length > 0 %}
# This configures the connection to the Active MQ broker so that we can send and receive messages.
# There are many settings for specifying the broker url: http://activemq.apache.org/activemq-4-connection-uris.html
# Including with failover support details here: http://activemq.apache.org/failover-transport-reference.html
# Default (url): failover://(tcp://127.0.0.1:61616)?initialReconnectDelay=2000&maxReconnectAttempts=2
# Default (username/password): None
activemq.broker.url=failover://(tcp://{{groups['activemq'][0]}}:61616)?initialReconnectDelay=2000&maxReconnectAttempts=2
activemq.broker.username=admin
activemq.broker.password=password
{% else %}
# This configures the connection to the Active MQ broker so that we can send and receive messages.
# There are many settings for specifying the broker url: http://activemq.apache.org/activemq-4-connection-uris.html
# Including with failover support details here: http://activemq.apache.org/failover-transport-reference.html
# Default (url): failover://(tcp://127.0.0.1:61616)?initialReconnectDelay=2000&maxReconnectAttempts=2
# Default (username/password): None
#activemq.broker.url=failover://(tcp://127.0.0.1:61616)?initialReconnectDelay=2000&maxReconnectAttempts=2
#activemq.broker.username=admin
#activemq.broker.password=password
{% endif %}

# Default directory to use for embedded solr indexes.
# If not set, ${karaf.data}/solr-indexes will be used.
#org.opencastproject.solr.dir=${karaf.data}/solr-indexes

# Directory to store the embedded solr indices.  This should be a persistent and stable directory.
# Default: ${org.opencastproject.solr.dir}/{archive, search, series, scheduler, workflow}
#org.opencastproject.archive.solr.dir=${org.opencastproject.solr.dir}/archive
#org.opencastproject.scheduler.solr.dir=${org.opencastproject.solr.dir}/scheduler
#org.opencastproject.search.solr.dir=${org.opencastproject.solr.dir}/search
#org.opencastproject.series.solr.dir=${org.opencastproject.solr.dir}/series
#org.opencastproject.workflow.solr.dir=${org.opencastproject.solr.dir}/workflow

# URLs of dedicated Solr server to use.  Note that if thesw URLs are specified, the local embedded Solr index as
# configured using `org.opencastproject.*.solr.dir` will be ignored. A dedicated Solr server should be set up in order
# to enable running multiple instances of the related service. Please consult http://lucene.apache.org/solr/ on how to
# set up a standalone Solr server.
{% if groups['solr'] is defined and groups['solr'] | length > 0 %}
org.opencastproject.archive.solr.url=http://{{groups['solr'][0]}}:8983/solr/
org.opencastproject.scheduler.solr.url=http://{{groups['solr'][0]}}:8983/solr/
org.opencastproject.search.solr.url=http://{{groups['solr'][0]}}:8983/solr/
org.opencastproject.series.solr.url=http://{{groups['solr'][0]}}:8983/solr/
org.opencastproject.workflow.solr.url=http://{{groups['solr'][0]}}:8983/solr/
{% else %}
#org.opencastproject.archive.solr.url=http://localhost:8983/solr/
#org.opencastproject.scheduler.solr.url=http://localhost:8983/solr/
#org.opencastproject.search.solr.url=http://localhost:8983/solr/
#org.opencastproject.series.solr.url=http://localhost:8983/solr/
#org.opencastproject.workflow.solr.url=http://localhost:8983/solr/
{% endif %}
# The path to the archive repository
org.opencastproject.episode.rootdir=${org.opencastproject.storage.dir}/archive

# The path to the repository of files used during media processing.
org.opencastproject.file.repo.path=${org.opencastproject.storage.dir}/files

# The base URL of the file server.  When using a shared filesystem between servers, set all servers to use the same URL.
# Only then will hard linking between the working file repository and the workspace be enabled to prevent downloads.
#org.opencastproject.file.repo.url=${org.opencastproject.server.url}

# The path to the working files (recommend using fast, transient storage)
org.opencastproject.workspace.rootdir=${org.opencastproject.storage.dir}/workspace

# The scheduled period in seconds, at which a workspace cleanup operation is performed.
# 86400 seconds equals 24 hours.
# Default value: -1 (Disable cleanup scheduler)
org.opencastproject.workspace.cleanup.period=86400

# The maximum age a file must reach in seconds before a deletion of the file in the workspace cleanup operation is
# performed. 2592000 seconds equals 30 days.
# Default value: -1 (max age will never be reached)
org.opencastproject.workspace.cleanup.max.age=2592000

# The ID of the default workflow definition to run when media are ingested
org.opencastproject.workflow.default.definition=ng-schedule-and-upload

# The max number of ingests to allow at the same time. If more ingests try than the max they will receive service
# unavailable. A value of 0 means that the server will accept all ingests.
# Default: 0
#org.opencastproject.ingest.max.concurrent=0

# Send server configuration data to the Opencast project to help us track how people are using Opencast.  No security
# related information will be sent to the opencast project.  Comment this out to disable this feature.
#org.opencastproject.anonymous.feedback.url=http://opencast.org/form/tracking

# The maximum number of concurrent files to ingest from the inbox directory
# Default: 1
#org.opencastproject.inbox.threads=1

# Path to the ffmpeg binary. Its name is sufficient if the binary is in the
# system path (default: ffmpeg)
#org.opencastproject.composer.ffmpeg.path=/opt/ffmpeg/ffmpeg

# Path to the ffprobe binary. Its name is sufficient if the binary is in the
# system path (default: ffprobe)
#org.opencastproject.inspection.ffprobe.path=/opt/ffmpeg/ffprobe

# Path to the tesseract binary used by the text analyzer. Its name is
# sufficient if the binary is in the system path (default: tesseract)
#org.opencastproject.textanalyzer.tesseract.path=/opt/tesseract/tesseract

# Additional options for Tesseract like language or page segmentation mode.
# The default are no additional options.
#org.opencastproject.textanalyzer.tesseract.options=-l eng -psm 3

# Path to the hunspell binary used by the opencast-dictionary-hunspell
# module. The default ist just "hunspell" which requires hunspell to be in the
# search path.
#org.opencastproject.dictionary.hunspell.binary=/opt/hunspell/hunspell

# Command to use for filtering text by the opencast-dictionary-hunspell
# module. The command is appended to the hunspell binary path. It should filter
# the text from stdin and print the recognized words to stdout. Usually this
# should be a combination of "-G" and a list of dictionaries. The default is to
# use "-d de_DE,en_GB,en_US -G".
#org.opencastproject.dictionary.hunspell.command=-i utf-8 -d de_DE,en_GB,en_US -G

# The path for SoX command line used by audio normalization
#org.opencastproject.sox.path=/opt/sox/sox

# Email address of the server's admin.
org.opencastproject.admin.email={{ opencast_admin_mail| default('admin@localhost') }}

# Location of the temporary directory to build zip archives.
# Default: ${org.opencastproject.storage.dir}/tmp/zip
#org.opencastproject.workflow.handler.workflow.ZipWorkflowOperationHandler.tmpdir=${org.opencastproject.storage.dir}/tmp/zip

# Whether opencast should import test-data by the given csv file path.
# Default: false
#org.opencastproject.dataloader.testdata=false

# The path to the CSV file to import the data from it
org.opencastproject.dataloader.csv=${karaf.etc}/dataimport

# The location to store uploaded static files such as images and videos.
org.opencastproject.staticfiles.rootdir=${org.opencastproject.storage.dir}/staticfiles

# True means to use a webserver to serve the static files but this will not secure
# any of the files using user or organization security. If false it uses
# Opencast endpoints to serve and secure the files.
org.opencastproject.staticfiles.webserver.enabled=false

# The url to the location where the webserver serves the static file uploads from. It will add the organization and uuid
# for the uploaded static file. If not set Opencast uses endpoints to serve and secure the files.
org.opencastproject.staticfiles.webserver.url=${org.opencastproject.server.url}/staticfiles/

# This is the maximum allowable size in bytes for a file to be uploaded. If the property is missing or set to 0 it is
# disabled.
# Default is 1000000000 which is 1GB.
org.opencastproject.staticfiles.upload.max.size=1000000000

# The place for Karaf to put the lock file ensuring that Opencast is not run twice at the same time.
karaf.lock.dir=${karaf.data}

# Setting or deactivating the remote shutdown port in Apache Karaf. Commenting this out will make Karaf listen to a
# random shutdown port on localhost, announcing it via ${karaf.shutdown.port.file}. Setting this to -1 will deactivate
# the shutdown port. Note that the stop script is based on this and will not work any longer if the port is deactivated.
#karaf.shutdown.port=-1

# Specifies the location of the port file for Opencast. It is used by the shutdown script to send the shutdown command
# to the main process.
karaf.shutdown.port.file=${karaf.data}/port

# Specifies the location of the PID file for Opencast. It is used by the shutdown script to synchronously shut down
# Opencast as it will wait for the process with the given process id. Removing this will cause the network port to be
# used as fallback.
karaf.shutdown.pid.file=${karaf.data}/pid

# Command for shutting down Opencast. If the shutdown port is enabled, Opencast will listen for this command to initiate
# the shut down procedure.
karaf.shutdown.command = 3500d4e3-ce93-4ae3-abb4-5e90cef4deb
